#!/usr/bin/env python
#
# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
# The first ten terms would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# 
# Let us list the factors of the first seven triangle numbers:
# 
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# 
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?
#
'''
>>> divisors_cont(28)
6
>>> divisors_cont(8400)
60
'''

import time

def find_element(position):
    cont = 1
    result = 0 
    while cont <= position:
        result += cont
        cont += 1
    return result


def divisors_cont(number):
    divisors = {}
    cont = 2
    while number > 1:
        if number % cont != 0:
            cont += 1
        else:
            try:
                divisors[cont] += 1
            except KeyError:
                divisors[cont] = 1
            number = number / cont
            cont = 2
    result = 1
    for key in divisors:
        result *= divisors[key] + 1
    return result

def divisors_cont_2(number):
    return ((number*number) + number) / 2

LIMIT = 500

def main():
    cont = 1
    while True:
        number = find_element(cont)
        div_count = divisors_cont_2(number)
        if div_count >= LIMIT:
            print number
            break
        cont += 1

import sys
if len(sys.argv) == 2 and sys.argv[1] ==  'test':
    import doctest
    doctest.testmod()
else:
    import cProfile
    cProfile.run('main()')